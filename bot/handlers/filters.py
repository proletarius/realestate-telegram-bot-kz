from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery
from bot.states.search_filter import SearchFilter
from bot.keyboards.inline import rooms_keyboard, property_type_keyboard, operation_type_keyboard
from db.models import Preference
from db.database import AsyncSessionLocal


router = Router()

@router.message(SearchFilter.city)
async def set_city(message: types.Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer("üìÑ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Å–¥–µ–ª–∫–∏:", reply_markup=operation_type_keyboard())
    await state.set_state(SearchFilter.operation_type)


@router.callback_query(SearchFilter.operation_type, F.data.startswith("op_"))
async def set_operation_type(callback: CallbackQuery, state: FSMContext):
    op_raw = callback.data.split("_")[1]
    operation_type = "–∞—Ä–µ–Ω–¥–∞" if op_raw == "rent" else "–ø–æ–∫—É–ø–∫–∞"

    await state.update_data(operation_type=operation_type)
    await callback.message.edit_reply_markup()
    await callback.message.answer("üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞?")
    await state.set_state(SearchFilter.max_price)
    await callback.answer()


@router.message(SearchFilter.max_price)
async def set_max_price(message: types.Message, state: FSMContext):
    try:
        max_price = int(message.text.replace(" ", ""))
        await state.update_data(max_price=max_price)
        await message.answer("üõè –°–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç?", reply_markup=rooms_keyboard())
        await state.set_state(SearchFilter.rooms)
    except ValueError: 
        await message.answer("üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: 200000")


@router.callback_query(SearchFilter.rooms, F.data.startswith("room_"))
async def room_selected(callback: CallbackQuery, state: FSMContext):
    room_raw = callback.data.split("_")[1]
    rooms = 4 if room_raw == "4" else int(room_raw)

    await state.update_data(rooms=rooms)
    await callback.message.edit_reply_markup(reply_markup=None)  # —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤—É
    await callback.message.answer("üè† –ß—Ç–æ –∏—â–µ–º?", reply_markup=property_type_keyboard())
    await state.set_state(SearchFilter.property_type)
    await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏"


@router.callback_query(SearchFilter.property_type, F.data.startswith("type_"))
async def property_type_selected(callback: CallbackQuery, state: FSMContext):
    prop_raw = callback.data.split("_")[1]
    prop_type = "–∫–≤–∞—Ä—Ç–∏—Ä–∞" if prop_raw == "flat" else "–¥–æ–º"

    await state.update_data(property_type=prop_type)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –≤ –ë–î
    data = await state.get_data()
    from db.models import Preference
    from db.database import AsyncSessionLocal

    async with AsyncSessionLocal() as session:
        pref = Preference(
            user_id=callback.from_user.id,
            city=data["city"],
            operation_type=data["operation_type"],
            max_price=data["max_price"],
            rooms=data["rooms"],
            property_type=prop_type
        )
        session.add(pref)
        await session.commit()

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer("‚úÖ –§–∏–ª—å—Ç—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –Ø –Ω–∞—á–Ω—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ.")
    await state.clear()
    await callback.answer()