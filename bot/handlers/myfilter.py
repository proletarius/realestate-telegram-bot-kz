from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from db.database import AsyncSessionLocal
from db.models import Preference
from bot.keyboards.inline import edit_or_delete_filter_keyboard
from aiogram import Router

router = Router()

@router.message(Command("myfilter"))
async def show_my_filter_message(message: Message):
    await show_my_filter(message)


@router.callback_query(lambda c: c.data == "view_filter")
async def show_my_filter_callback(callback: CallbackQuery):
    await show_my_filter(callback)
    await callback.answer()

async def show_my_filter(event: Message | CallbackQuery):
    user_id = event.from_user.id

    async with AsyncSessionLocal() as session:
        result = await session.execute(
            Preference.__table__.select().where(Preference.user_id == user_id)
        )
        pref = result.fetchone()

    if not pref:
        if isinstance(event, CallbackQuery):
            await event.message.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /filter —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.")
        else:
            await event.answer("‚ö†Ô∏è –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π /filter —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å.")
        return

    data = pref._mapping

    text = (
        "<b>üîé –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä:</b>\n"
        f"üìç –ì–æ—Ä–æ–¥: <b>{data.get('city') or '-'}</b>\n"
        f"üì¶ –°–¥–µ–ª–∫–∞: <b>{data.get('operation_type') or '-'}</b>\n"
        f"üè† –¢–∏–ø: <b>{data.get('property_type') or '-'}</b>\n"
        f"üí∞ –î–æ: <b>{data.get('max_price') or '‚Äî'} ‚Ç∏</b>\n"
        f"üõè –ö–æ–º–Ω–∞—Ç: <b>{data.get('rooms') or '–ù–µ –≤–∞–∂–Ω–æ'}</b>\n"
        f"üìã –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: <b>{data.get('search_text') or '–ù–µ—Ç'}</b>\n"
        f"üè° –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞: <b>{data.get('land_type') or '–ù–µ –≤–∞–∂–Ω–æ'}</b>\n"
        f"üìÜ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: <b>{data.get('year_built') or '–ù–µ –≤–∞–∂–Ω–æ'}</b>\n"
    )

    short_text = text[:4000]  # –±–µ–∑–æ–ø–∞—Å–Ω–æ, –Ω–æ –ø–æ—á—Ç–∏ –ª–∏–º–∏—Ç

    if isinstance(event, CallbackQuery):
        await event.message.answer(short_text, reply_markup=edit_or_delete_filter_keyboard())
    else:
        await event.answer(short_text, reply_markup=edit_or_delete_filter_keyboard())

@router.callback_query(lambda c: c.data == "delete_filter")
async def delete_filter_callback(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    async with AsyncSessionLocal() as session:
        await session.execute(
            Preference.__table__.delete().where(Preference.user_id == user_id)
        )
        await session.commit()

    await callback.message.edit_reply_markup()
    await callback.message.answer("üóë –§–∏–ª—å—Ç—Ä —É–¥–∞–ª—ë–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /filter —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.")
    await callback.answer()
