import logging
import asyncio
import os
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# –ß—Ç–µ–Ω–∏–µ –∏–∑ .env
ADMIN_ID = int(os.getenv("ADMIN_ID", 0))
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Telegram-–±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

# üìÅ –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ logs —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

# üìù –õ–æ–≥–≥–µ—Ä, –ø–∏—à—É—â–∏–π –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler("logs/bot.log", encoding="utf-8")
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))

# üîÅ Telegram-–ª–æ–≥–≥–µ—Ä
class TelegramErrorHandler(logging.Handler):
    def emit(self, record):
        if record.levelno >= logging.ERROR and ADMIN_ID:
            log_entry = self.format(record)
            asyncio.create_task(self.send_to_admin(log_entry))

    async def send_to_admin(self, text: str):
        try:
            await bot.send_message(ADMIN_ID, f"‚ùóÔ∏è<b>–û—à–∏–±–∫–∞:</b>\n<pre>{text}</pre>", parse_mode=ParseMode.HTML)
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –∞–¥–º–∏–Ω—É:", e)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —Ñ–∞–π–ª
    logger.addHandler(file_handler)

    # –î–æ–±–∞–≤–ª—è–µ–º Telegram –¥–ª—è ERROR
    telegram_handler = TelegramErrorHandler()
    telegram_handler.setLevel(logging.ERROR)
    telegram_handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(name)s - %(message)s'))
    logger.addHandler(telegram_handler)
